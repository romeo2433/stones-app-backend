// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Stones.Data;

#nullable disable

namespace Stone1234.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250922153548_AddCouleurToPierre")]
    partial class AddCouleurToPierre
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Stones.Models.Carat_", b =>
                {
                    b.Property<int>("id_carat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_carat"));

                    b.Property<decimal>("valeur")
                        .HasColumnType("numeric");

                    b.HasKey("id_carat");

                    b.ToTable("carat_", (string)null);
                });

            modelBuilder.Entity("Stones.Models.Couleur", b =>
                {
                    b.Property<int>("Id_couleur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_couleur");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_couleur"));

                    b.Property<string>("Nom_couleur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nom_couleur");

                    b.HasKey("Id_couleur");

                    b.ToTable("couleurs");
                });

            modelBuilder.Entity("Stones.Models.Forme", b =>
                {
                    b.Property<int>("id_forme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id_forme"));

                    b.Property<string>("nom_forme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_forme");

                    b.ToTable("forme", (string)null);
                });

            modelBuilder.Entity("Stones.Models.MouvementStock", b =>
                {
                    b.Property<int>("Id_mvt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_mvt");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_mvt"));

                    b.Property<DateTime>("Date_mouvement")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_mouvement");

                    b.Property<int>("Id_pavillon")
                        .HasColumnType("integer")
                        .HasColumnName("id_pavillon");

                    b.Property<int>("Id_utilisateur")
                        .HasColumnType("integer")
                        .HasColumnName("id_utilisateur");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("total");

                    b.Property<string>("Type_mouvement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type_mouvement");

                    b.HasKey("Id_mvt");

                    b.HasIndex("Id_pavillon");

                    b.HasIndex("Id_utilisateur");

                    b.ToTable("mouvement_stock", (string)null);
                });

            modelBuilder.Entity("Stones.Models.MouvementStockDetail", b =>
                {
                    b.Property<int>("Id_mvtdetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_mvtdetail");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_mvtdetail"));

                    b.Property<int>("Id_mvt")
                        .HasColumnType("integer")
                        .HasColumnName("id_mvt");

                    b.Property<int>("Id_pierre")
                        .HasColumnType("integer")
                        .HasColumnName("id_pierre");

                    b.Property<decimal>("Prix_unitaire")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("prix_unitaire");

                    b.Property<decimal>("Quantite")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("quantite");

                    b.HasKey("Id_mvtdetail");

                    b.HasIndex("Id_mvt");

                    b.HasIndex("Id_pierre");

                    b.ToTable("mouvement_stock_detail", (string)null);
                });

            modelBuilder.Entity("Stones.Models.Pavillon", b =>
                {
                    b.Property<int>("Id_pavillon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_pavillon");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_pavillon"));

                    b.Property<int>("Id_villes")
                        .HasColumnType("integer")
                        .HasColumnName("id_villes");

                    b.Property<string>("Matricule")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("matricule");

                    b.Property<string>("Nom_pavillon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nom_pavillon");

                    b.HasKey("Id_pavillon");

                    b.HasIndex("Id_villes");

                    b.ToTable("pavillons", (string)null);
                });

            modelBuilder.Entity("Stones.Models.Pierre", b =>
                {
                    b.Property<int>("Id_pierre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_pierre");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_pierre"));

                    b.Property<int>("Id_carat")
                        .HasColumnType("integer")
                        .HasColumnName("id_carat");

                    b.Property<int>("Id_couleur")
                        .HasColumnType("integer")
                        .HasColumnName("id_couleur");

                    b.Property<int>("Id_forme")
                        .HasColumnType("integer")
                        .HasColumnName("id_forme");

                    b.Property<int>("Id_qua")
                        .HasColumnType("integer")
                        .HasColumnName("id_qua");

                    b.Property<string>("Nom_pierre")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nom_pierre");

                    b.Property<decimal>("Prix_vente")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("prix_vente");

                    b.HasKey("Id_pierre");

                    b.HasIndex("Id_carat");

                    b.HasIndex("Id_couleur");

                    b.HasIndex("Id_forme");

                    b.HasIndex("Id_qua");

                    b.ToTable("pierres", (string)null);
                });

            modelBuilder.Entity("Stones.Models.PierreStockViewModel", b =>
                {
                    b.Property<decimal>("Carat")
                        .HasColumnType("numeric");

                    b.Property<string>("Forme")
                        .HasColumnType("text");

                    b.Property<int>("Id_pierre")
                        .HasColumnType("integer");

                    b.Property<string>("Nom_pierre")
                        .HasColumnType("text");

                    b.Property<decimal>("Prix_vente")
                        .HasColumnType("numeric");

                    b.Property<string>("Qualite")
                        .HasColumnType("text");

                    b.Property<decimal>("Quantite_totale")
                        .HasColumnType("numeric");

                    b.ToTable("PierreStockViewModels");
                });

            modelBuilder.Entity("Stones.Models.Qualite", b =>
                {
                    b.Property<int>("Id_qua")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_qua");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_qua"));

                    b.Property<string>("Nom_qualite")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nom_qualite");

                    b.HasKey("Id_qua");

                    b.ToTable("qualite", (string)null);
                });

            modelBuilder.Entity("Stones.Models.Utilisateur", b =>
                {
                    b.Property<int>("IdUtilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_utilisateur");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUtilisateur"));

                    b.Property<string>("NomComplet")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nom_complet");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numero");

                    b.HasKey("IdUtilisateur");

                    b.ToTable("utilisateur", (string)null);
                });

            modelBuilder.Entity("Stones.Models.Ville", b =>
                {
                    b.Property<int>("Id_villes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_villes");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id_villes"));

                    b.Property<string>("Nom_ville")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nom_ville");

                    b.HasKey("Id_villes");

                    b.ToTable("villes", (string)null);
                });

            modelBuilder.Entity("Stones.Models.MouvementStock", b =>
                {
                    b.HasOne("Stones.Models.Pavillon", "Pavillon")
                        .WithMany("MouvementStocks")
                        .HasForeignKey("Id_pavillon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stones.Models.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("Id_utilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pavillon");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Stones.Models.MouvementStockDetail", b =>
                {
                    b.HasOne("Stones.Models.MouvementStock", "MouvementStock")
                        .WithMany("MouvementStockDetails")
                        .HasForeignKey("Id_mvt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stones.Models.Pierre", "Pierre")
                        .WithMany("MouvementStockDetails")
                        .HasForeignKey("Id_pierre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MouvementStock");

                    b.Navigation("Pierre");
                });

            modelBuilder.Entity("Stones.Models.Pavillon", b =>
                {
                    b.HasOne("Stones.Models.Ville", "Ville")
                        .WithMany("Pavillons")
                        .HasForeignKey("Id_villes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("Stones.Models.Pierre", b =>
                {
                    b.HasOne("Stones.Models.Carat_", "Carat")
                        .WithMany("Pierres")
                        .HasForeignKey("Id_carat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stones.Models.Couleur", "Couleur")
                        .WithMany("Pierres")
                        .HasForeignKey("Id_couleur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stones.Models.Forme", "Forme")
                        .WithMany("Pierres")
                        .HasForeignKey("Id_forme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Stones.Models.Qualite", "Qualite")
                        .WithMany("Pierres")
                        .HasForeignKey("Id_qua")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carat");

                    b.Navigation("Couleur");

                    b.Navigation("Forme");

                    b.Navigation("Qualite");
                });

            modelBuilder.Entity("Stones.Models.Carat_", b =>
                {
                    b.Navigation("Pierres");
                });

            modelBuilder.Entity("Stones.Models.Couleur", b =>
                {
                    b.Navigation("Pierres");
                });

            modelBuilder.Entity("Stones.Models.Forme", b =>
                {
                    b.Navigation("Pierres");
                });

            modelBuilder.Entity("Stones.Models.MouvementStock", b =>
                {
                    b.Navigation("MouvementStockDetails");
                });

            modelBuilder.Entity("Stones.Models.Pavillon", b =>
                {
                    b.Navigation("MouvementStocks");
                });

            modelBuilder.Entity("Stones.Models.Pierre", b =>
                {
                    b.Navigation("MouvementStockDetails");
                });

            modelBuilder.Entity("Stones.Models.Qualite", b =>
                {
                    b.Navigation("Pierres");
                });

            modelBuilder.Entity("Stones.Models.Ville", b =>
                {
                    b.Navigation("Pavillons");
                });
#pragma warning restore 612, 618
        }
    }
}
